diff -ur --new-file xkeyboard-config-2.18-orig/keycodes/james xkeyboard-config-2.18/keycodes/james
--- xkeyboard-config-2.18-orig/keycodes/james	1970-01-01 01:00:00.000000000 +0100
+++ xkeyboard-config-2.18/keycodes/james	2016-10-17 10:33:11.617271359 +0100
@@ -0,0 +1,314 @@
+// translation from evdev scancodes to something resembling xfree86 keycodes.
+
+default xkb_keycodes "james" {
+	minimum = 8;
+	maximum = 255;
+
+        # Added for pc105 compatibility
+        <LSGT> = 94;
+
+	<TLDE> = 49;
+	<AE01> = 10;
+	<AE02> = 11;
+	<AE03> = 12;
+	<AE04> = 13;
+	<AE05> = 14;
+	<AE06> = 15;
+	<AE07> = 16;
+	<AE08> = 17;
+	<AE09> = 18;
+	<AE10> = 19;
+	<AE11> = 20;
+	<AE12> = 21;
+	<BKSP> = 22;
+
+	<TAB> = 23;
+	<AD01> = 24;
+	<AD02> = 25;
+	<AD03> = 26;
+	<AD04> = 27;
+	<AD05> = 28;
+	<AD06> = 29;
+	<AD07> = 30;
+	<AD08> = 31;
+	<AD09> = 32;
+	<AD10> = 33;
+	<AD11> = 34;
+	<AD12> = 35;
+	<BKSL> = 51;
+	alias <AC12> = <BKSL>;
+	<RTRN> = 36;
+
+	<ESC> = 37;  // was left ctrl
+	<AC01> = 38;
+	<AC02> = 39;
+	<AC03> = 40;
+	<AC04> = 41;
+	<AC05> = 42;
+	<AC06> = 43;
+	<AC07> = 44;
+	<AC08> = 45;
+	<AC09> = 46;
+	<AC10> = 47;
+	<AC11> = 48;
+
+	<LCTL> = 50;  // was left shift
+	<AB01> = 52;
+	<AB02> = 53;
+	<AB03> = 54;
+	<AB04> = 55;
+	<AB05> = 56;
+	<AB06> = 57;
+	<AB07> = 58;
+	<AB08> = 59;
+	<AB09> = 60;
+	<AB10> = 61;
+	<RTSH> = 62;
+
+	<LALT> = 64;
+	<SPCE> = 65;
+	<LFSH> = 66;  // was caps lock
+	<RCTL> = 105;
+	<RALT> = 108;
+	// Microsoft keyboard extra keys
+	<LWIN> = 133;
+	<RWIN> = 134;
+	<COMP> = 135;
+	alias <MENU> = <COMP>;
+
+	<CAPS> = 9;  // was esc
+	<FK01> = 67;
+	<FK02> = 68;
+	<FK03> = 69;
+	<FK04> = 70;
+	<FK05> = 71;
+	<FK06> = 72;
+	<FK07> = 73;
+	<FK08> = 74;
+	<FK09> = 75;
+	<FK10> = 76;
+	<FK11> = 95;
+	<FK12> = 96;
+
+	<PRSC> = 107;
+	// <SYRQ> = 107;
+	<SCLK> = 78;
+	<PAUS> = 127;
+	// <BRK> = 419;
+
+	<INS> = 118;
+	<HOME> = 110;
+	<PGUP> = 112;
+	<DELE> = 119;
+	<END> = 115;
+	<PGDN> = 117;
+
+	<UP> = 111;
+	<LEFT> = 113;
+	<DOWN> = 116;
+	<RGHT> = 114;
+
+	<NMLK> = 77;
+	<KPDV> = 106;
+	<KPMU> = 63;
+	<KPSU> = 82;
+
+	<KP7> = 79;
+	<KP8> = 80;
+	<KP9> = 81;
+	<KPAD> = 86;
+
+	<KP4> = 83;
+	<KP5> = 84;
+	<KP6> = 85;
+
+	<KP1> = 87;
+	<KP2> = 88;
+	<KP3> = 89;
+	<KPEN> = 104;
+
+	<KP0> = 90;
+	<KPDL> = 91;
+	<KPEQ> = 125;
+
+	<FK13> = 191;
+	<FK14> = 192;
+	<FK15> = 193;
+	<FK16> = 194;
+	<FK17> = 195;
+	<FK18> = 196;
+	<FK19> = 197;
+	<FK20> = 198;
+	<FK21> = 199;
+	<FK22> = 200;
+	<FK23> = 201;
+	<FK24> = 202;
+
+	// Keys that are generated on Japanese keyboards
+
+	//<HZTG> =  93;	// Hankaku/Zenkakau toggle - not actually used
+	alias <HZTG> = <TLDE>;
+	<HKTG> = 101;	// Hiragana/Katakana toggle
+	<AB11> = 97;	// backslash/underscore
+	<HENK> = 100;	// Henkan
+	<MUHE> = 102;	// Muhenkan
+	<AE13> = 132;	// Yen
+	<KATA> =  98;	// Katakana
+	<HIRA> =  99;	// Hiragana
+	<JPCM> = 103;	// KPJPComma
+	//<RO>   =  97;	// Romaji
+
+	// Keys that are generated on Korean keyboards
+
+	<HNGL> = 130;	// Hangul Latin toggle
+	<HJCV> = 131;	// Hangul to Hanja conversion
+
+	// Solaris compatibility
+
+	alias <LMTA> = <LWIN>;
+	alias <RMTA> = <RWIN>;
+	<MUTE> = 121;
+	<VOL-> = 122;
+	<VOL+> = 123;
+	<POWR> = 124;
+	<STOP> = 136;
+	<AGAI> = 137;
+	<PROP> = 138;
+	<UNDO> = 139;
+	<FRNT> = 140;
+	<COPY> = 141;
+	<OPEN> = 142;
+	<PAST> = 143;
+	<FIND> = 144;
+	<CUT>  = 145;
+	<HELP> = 146;
+
+	// Extended keys that may be generated on "Internet" keyboards.
+	// evdev has standardize names for these.
+
+	<LNFD> = 109;	// #define KEY_LINEFEED            101
+	<I120> = 120;	// #define KEY_MACRO               112
+	<I126> = 126;	// #define KEY_KPPLUSMINUS         118
+	<I128> = 128;   // #define KEY_SCALE               120
+	<I129> = 129;	// #define KEY_KPCOMMA             121
+	<I147> = 147;	// #define KEY_MENU                139
+	<I148> = 148;	// #define KEY_CALC                140
+	<I149> = 149;	// #define KEY_SETUP               141
+	<I150> = 150;	// #define KEY_SLEEP               142
+	<I151> = 151;	// #define KEY_WAKEUP              143
+	<I152> = 152;	// #define KEY_FILE                144
+	<I153> = 153;	// #define KEY_SENDFILE            145
+	<I154> = 154;	// #define KEY_DELETEFILE          146
+	<I155> = 155;	// #define KEY_XFER                147
+	<I156> = 156;	// #define KEY_PROG1               148
+	<I157> = 157;	// #define KEY_PROG2               149
+	<I158> = 158;	// #define KEY_WWW                 150
+	<I159> = 159;	// #define KEY_MSDOS               151
+	<I160> = 160;	// #define KEY_COFFEE              152
+	<I161> = 161;	// #define KEY_DIRECTION           153
+	<I162> = 162;	// #define KEY_CYCLEWINDOWS        154
+	<I163> = 163;	// #define KEY_MAIL                155
+	<I164> = 164;	// #define KEY_BOOKMARKS           156
+	<I165> = 165;	// #define KEY_COMPUTER            157
+	<I166> = 166;	// #define KEY_BACK                158
+	<I167> = 167;	// #define KEY_FORWARD             159
+	<I168> = 168;	// #define KEY_CLOSECD             160
+	<I169> = 169;	// #define KEY_EJECTCD             161
+	<I170> = 170;	// #define KEY_EJECTCLOSECD        162
+	<I171> = 171;	// #define KEY_NEXTSONG            163
+	<I172> = 172;	// #define KEY_PLAYPAUSE           164
+	<I173> = 173;	// #define KEY_PREVIOUSSONG        165
+	<I174> = 174;	// #define KEY_STOPCD              166
+	<I175> = 175;	// #define KEY_RECORD              167
+	<I176> = 176;	// #define KEY_REWIND              168
+	<I177> = 177;	// #define KEY_PHONE               169
+	<I178> = 178;	// #define KEY_ISO                 170
+	<I179> = 179;	// #define KEY_CONFIG              171
+	<I180> = 180;	// #define KEY_HOMEPAGE            172
+	<I181> = 181;	// #define KEY_REFRESH             173
+	<I182> = 182;	// #define KEY_EXIT                174
+	<I183> = 183;	// #define KEY_MOVE                175
+	<I184> = 184;	// #define KEY_EDIT                176
+	<I185> = 185;	// #define KEY_SCROLLUP            177
+	<I186> = 186;	// #define KEY_SCROLLDOWN          178
+	<I187> = 187;	// #define KEY_KPLEFTPAREN         179
+	<I188> = 188;	// #define KEY_KPRIGHTPAREN        180
+	<I189> = 189;	// #define KEY_NEW                 181
+	<I190> = 190;	// #define KEY_REDO                182
+	<I208> = 208;	// #define KEY_PLAYCD              200
+	<I209> = 209;	// #define KEY_PAUSECD             201
+	<I210> = 210;	// #define KEY_PROG3               202
+	<I211> = 211;	// #define KEY_PROG4               203 conflicts with AB11
+	<I212> = 212;   // #define KEY_DASHBOARD           204
+	<I213> = 213;	// #define KEY_SUSPEND             205
+	<I214> = 214;	// #define KEY_CLOSE               206
+	<I215> = 215;	// #define KEY_PLAY                207
+	<I216> = 216;	// #define KEY_FASTFORWARD         208
+	<I217> = 217;	// #define KEY_BASSBOOST           209
+	<I218> = 218;	// #define KEY_PRINT               210
+	<I219> = 219;	// #define KEY_HP                  211
+	<I220> = 220;	// #define KEY_CAMERA              212
+	<I221> = 221;	// #define KEY_SOUND               213
+	<I222> = 222;	// #define KEY_QUESTION            214
+	<I223> = 223;	// #define KEY_EMAIL               215
+	<I224> = 224;	// #define KEY_CHAT                216
+	<I225> = 225;	// #define KEY_SEARCH              217
+	<I226> = 226;	// #define KEY_CONNECT             218
+	<I227> = 227;	// #define KEY_FINANCE             219
+	<I228> = 228;	// #define KEY_SPORT               220
+	<I229> = 229;	// #define KEY_SHOP                221
+	<I230> = 230;	// #define KEY_ALTERASE            222
+	<I231> = 231;	// #define KEY_CANCEL              223
+	<I232> = 232;	// #define KEY_BRIGHTNESSDOWN      224
+	<I233> = 233;	// #define KEY_BRIGHTNESSUP        225
+	<I234> = 234;	// #define KEY_MEDIA               226
+	<I235> = 235;	// #define KEY_SWITCHVIDEOMODE     227
+	<I236> = 236;	// #define KEY_KBDILLUMTOGGLE      228
+	<I237> = 237;	// #define KEY_KBDILLUMDOWN        229
+	<I238> = 238;	// #define KEY_KBDILLUMUP          230
+	<I239> = 239;	// #define KEY_SEND                231
+	<I240> = 240;	// #define KEY_REPLY               232
+	<I241> = 241;	// #define KEY_FORWARDMAIL         233
+	<I242> = 242;	// #define KEY_SAVE                234
+	<I243> = 243;	// #define KEY_DOCUMENTS           235
+	<I244> = 244;	// #define KEY_BATTERY             236
+	<I245> = 245;	// #define KEY_BLUETOOTH           237
+	<I246> = 246;	// #define KEY_WLAN                238
+	<I247> = 247;	// #define KEY_UWB                 239
+	<I248> = 248;	// #define KEY_UNKNOWN             240
+	<I249> = 249;	// #define KEY_VIDEO_NEXT          241
+	<I250> = 250;	// #define KEY_VIDEO_PREV          242
+	<I251> = 251;	// #define KEY_BRIGHTNESS_CYCLE    243
+	<I252> = 252;	// #define KEY_BRIGHTNESS_ZERO     244
+	<I253> = 253;	// #define KEY_DISPLAY_OFF         245
+
+	// Fake keycodes for virtual keys
+	<LVL3> =   92;
+	<MDSW> =   203;
+	<ALT>  =   204;
+	<META> =   205;
+	<SUPR> =   206;
+	<HYPR> =   207;
+
+	indicator 1  = "Caps Lock";
+	indicator 2  = "Num Lock";
+	indicator 3  = "Scroll Lock";
+	indicator 4  = "Compose";
+	indicator 5  = "Kana";
+	indicator 6  = "Sleep";
+	indicator 7  = "Suspend";
+	indicator 8  = "Mute";
+	indicator 9  = "Misc";
+	indicator 10 = "Mail";
+	indicator 11 = "Charging";
+
+	alias <ALGR> = <RALT>;
+
+	// For Brazilian ABNT2
+	alias <KPPT> = <I129>;
+};
+
+// PC98
+xkb_keycodes "pc98" {
+    include "evdev(evdev)"
+};
diff -ur --new-file xkeyboard-config-2.18-orig/keycodes/Makefile.am xkeyboard-config-2.18/keycodes/Makefile.am
--- xkeyboard-config-2.18-orig/keycodes/Makefile.am	2016-10-17 10:29:04.832669824 +0100
+++ xkeyboard-config-2.18/keycodes/Makefile.am	2016-10-17 10:37:34.257252017 +0100
@@ -18,6 +18,7 @@
 sun \
 xfree86 \
 xfree98 \
+james \
 README
 
 EXTRA_DIST = $(keycodes_DATA)
diff -ur --new-file xkeyboard-config-2.18-orig/keycodes/Makefile.in xkeyboard-config-2.18/keycodes/Makefile.in
--- xkeyboard-config-2.18-orig/keycodes/Makefile.in	2016-10-17 10:29:04.832669824 +0100
+++ xkeyboard-config-2.18/keycodes/Makefile.in	2016-10-17 10:38:42.989875063 +0100
@@ -379,6 +379,7 @@
 sun \
 xfree86 \
 xfree98 \
+james \
 README
 
 EXTRA_DIST = $(keycodes_DATA)
diff -ur --new-file xkeyboard-config-2.18-orig/rules/base.lists.part xkeyboard-config-2.18/rules/base.lists.part
--- xkeyboard-config-2.18-orig/rules/base.lists.part	2016-10-17 10:29:04.838669963 +0100
+++ xkeyboard-config-2.18/rules/base.lists.part	2016-10-17 10:40:36.695531341 +0100
@@ -47,6 +47,7 @@
               gb gr \
               hu \
               ie ir is it \
+              james \
               latam \
               lk lt \
               mn mt \
diff -ur --new-file xkeyboard-config-2.18-orig/rules/base.xml.in xkeyboard-config-2.18/rules/base.xml.in
--- xkeyboard-config-2.18-orig/rules/base.xml.in	2016-10-17 10:29:04.838669963 +0100
+++ xkeyboard-config-2.18/rules/base.xml.in	2016-10-17 10:44:41.856130885 +0100
@@ -1313,6 +1313,45 @@
   <layoutList>
     <layout>
       <configItem>
+        <name>james</name>
+        <shortDescription>my</shortDescription>
+        <description>Personal layouts</description>
+      </configItem>
+      <variantList>
+        <variant>
+          <configItem>
+            <name>colemak</name>
+            <description>English (UK, Colemak)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>prog</name>
+            <description>Programming (Colemak)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>progwide</name>
+            <description>Programming (Colemak, wide)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>jb</name>
+            <description>Lojban (Colemak, non-ASCII)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>jbwide</name>
+            <description>Lojban (Colemak, wide, non-ASCII)</description>
+          </configItem>
+        </variant>
+      </variantList>
+    </layout>
+    <layout>
+      <configItem>
         <name>us</name>
         <!-- Keyboard indicator for English layouts -->
         <_shortDescription>en</_shortDescription>
diff -ur --new-file xkeyboard-config-2.18-orig/rules/evdev.xml.in xkeyboard-config-2.18/rules/evdev.xml.in
--- xkeyboard-config-2.18-orig/rules/evdev.xml.in	2016-10-17 10:29:04.839669986 +0100
+++ xkeyboard-config-2.18/rules/evdev.xml.in	2016-10-17 10:45:56.508816390 +0100
@@ -1313,6 +1313,45 @@
   <layoutList>
     <layout>
       <configItem>
+        <name>james</name>
+        <shortDescription>my</shortDescription>
+        <description>Personal layouts</description>
+      </configItem>
+      <variantList>
+        <variant>
+          <configItem>
+            <name>colemak</name>
+            <description>English (UK, Colemak)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>prog</name>
+            <description>Programming (Colemak)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>progwide</name>
+            <description>Programming (Colemak, wide)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>jb</name>
+            <description>Lojban (Colemak, non-ASCII)</description>
+          </configItem>
+        </variant>
+        <variant>
+          <configItem>
+            <name>jbwide</name>
+            <description>Lojban (Colemak, wide, non-ASCII)</description>
+          </configItem>
+        </variant>
+      </variantList>
+    </layout>
+    <layout>
+      <configItem>
         <name>us</name>
         <!-- Keyboard indicator for English layouts -->
         <_shortDescription>en</_shortDescription>
diff -ur --new-file xkeyboard-config-2.18-orig/symbols/extend xkeyboard-config-2.18/symbols/extend
--- xkeyboard-config-2.18-orig/symbols/extend	1970-01-01 01:00:00.000000000 +0100
+++ xkeyboard-config-2.18/symbols/extend	2016-10-17 10:46:25.279464467 +0100
@@ -0,0 +1,600 @@
+// Extend mode symbols for xkb on X.Org Server 7.x
+// 2014-02-01 OEystein Bech "DreymaR" Gadmar
+// See "DreymaR's Big Bag of Keyboard Tricks": http://forum.colemak.com/viewtopic.php?pid=9918
+// A modular Extend mapping layer like the one I have in Portable Keyboard Layout for Windows
+// - Key names are in /usr/include/X11/keysymdef.h and XF86keysym.h (Removing the XK_ prefix)
+// - <FK##> mapped as XF86 Multimedia keys; shifted versions were not implemented in WinPKL
+//
+// These keys are modified/transposed by holding down the 'extend key' (CapsLock by default):
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |Esc + |F1 <> |F2 << |F3 >> |F4 <> |F5 <> |F6 << |F7 >> |F8 <> |F9 <> |F10<> |F11<> |F12<> |
+// |      | Pause| Rew  | Fwd  | Eject| Refr | Bri- | Bri+ | Sleep| WWW  | Mail | App1 | App2 |
+// | Caps | Play | Prev | Next | Stop | Mute | Vol- | Vol+ | Media| Home | Srch | File | Calc |
+// +======+======+======+======+======+======+======+======+======+======+======+======+======+
+// |` €€€ |1     |2     |3     |4     |5     |6     |7     |8     |9     |0     |-     |=     |
+// | Cust | F1   | F2   | F3   | F4   | F5   | F6   | F7   | F8   | F9   | F10  | F11  | F12  |
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |Tab   |Q €€€ |W *** |F <<> |P <>> |G *** |J ### |L ### |U ### |Y ### |; €€€ |[ €€€ |] €€€ |
+// |      | Esc  | *WhUp| BrBck| BrFwd| *MUp | PgUp | Home | Up   | End  | Del  | Esc  | Ins  |
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |Caps+ |A +++ |R *** |S +++ |T +++ |D *** |H ### |N ### |E ### |I ### |O €€€ |' €€€ |\ ><> |
+// | ++++ | Alt  | *WhDn| Shift| Ctrl | *MDn | PgDn | Left | Down | Right| Back | Menu | BrFav|
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |_ *** |Z €€€ |X === |C === |V === |B *** |K *** |M *** |, *** |. *** |/ €€€ |Spc € |Entr€ |
+// | *MOn | Undo | Cut  | Copy | Paste| *Bt1 | *Bt2 | *Bt3 | *MLe | *MRi | Multi| Enter| PrtSc|
+// +------+------+------+------+------+------+------+------+------+------+------+-------------+
+// Legend: # Movement; + Modifiers; = GUI edit; * Mouse; <> MultiMedia; € Various commands.
+//
+// KeyPad overlay with nav block to the left (lv7-8):
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |` €€€ |1     |2     |3     |4 £   |5 €   |6     |7     |8     |9     |0     |-     |=     |
+// | Cust |  !   |  @   |  #   |  $   |  %   |  ^   | KP_7 | KP_8 | KP_9 | KP_* | KP_- | KP_= |
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |Tab   |Q ### |W ### |F ### |P €€€ |G €€€ |J ### |L     |U     |Y     |;     |[ {   |] }   |
+// |      | Home | Up   | End  | Del  | Esc  | PgUp | KP_4 | KP_5 | KP_6 | KP_+ |  (   |  )   |
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |Caps+ |A ### |R ### |S ### |T €€€ |D     |H ### |N     |E     |I     |O     |' "   |\ |   |
+// | ++++ | Left | Down | Right| Back | K_Bgn| PgDn | KP_1 | KP_2 | KP_3 | K_Ent|  '   |  \   |
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+// |_ *** |Z €€€ |X === |C === |V === |B *** |K     |M     |, ;   |. :   |/     |Spc   |Entr  |
+// | *MOn | Undo | Cut  | Copy | Paste| *Bt1 | K_Lck| KP_0 |  ,   | KP_. | KP_/ | Spc  | K_Ent|
+// +------+------+------+------+------+------+------+------+------+------+------+------+------+
+//
+// NOTE: A lv7 (Level5+Level3) modifier might be necessary to use the KeyPad level sensibly
+//       One idea is to use AltGr+Caps as a lv7_lock (Caps+AltGr is already lv7_switch)
+// NOTE: If a hex pad is needed, the lv7+KBHDJG -> ABCDEF mappings are one solution
+
+default partial
+xkb_symbols "basic" {
+//    name[Group1]= "Extend layer";
+    include "extend(lv5)"
+};
+
+
+partial alphanumeric_keys modifier_keys
+xkb_symbols "lv5" {
+//    name[Group1]= "Extend layer";
+//    key.type[group1]="EIGHT_LEVEL"; // (Caps)Lock state not used on these keys
+    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC"; // Lock affects lv1/5 but not lv3/7 - a bit inflexible but OK I guess
+
+// TODO: If I set lv5-6 of Esc to Caps_Lock, lv1-4 are CapsLock PLUS Esc! Try a LockMods action?
+//    key <ESC>  { [ Escape , Escape , Escape , Escape  , Caps_Lock , Caps_Lock ] };
+    key <SCLK> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Caps_Lock            , Caps_Lock             , // CapsLock
+                   Caps_Lock            , Caps_Lock            ], // CapsLock
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   SetMods(mods=Lock)   , SetMods(mods=Lock)    , // Lock mod for <CAPS>
+                   NoAction()           , NoAction()           ]
+               };  // ScrollLock
+
+    key <FK01> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPlay         , XF86AudioPause        ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I208>,clearmods=all), Redirect(key=<I209>,clearmods=all), // <I208>/<I209>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F01
+    key <FK02> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPrev         , XF86AudioRewind       ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I173>,clearmods=all), Redirect(key=<I176>,clearmods=all), // <I173>/<I176>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F02
+    key <FK03> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioNext         , XF86AudioForward      ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I171>,clearmods=all), Redirect(key=<I216>,clearmods=all), // <I171>/<I216>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F03
+    key <FK04> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioStop         , XF86Eject             ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I174>,clearmods=all), Redirect(key=<I169>,clearmods=all), // <I174>/<I169>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F04
+    key <FK05> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMute         , XF86Reload            ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<MUTE>,clearmods=all), Redirect(key=<I181>,clearmods=all), // <MUTE>/<I181>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F05
+    key <FK06> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioLowerVolume  , XF86MonBrightnessDown ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<VOL->,clearmods=all), Redirect(key=<I232>,clearmods=all), // <VOL->/<I232>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F06
+    key <FK07> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioRaiseVolume  , XF86MonBrightnessUp   ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<VOL+>,clearmods=all), Redirect(key=<I233>,clearmods=all), // <VOL+>/<I233>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F07
+    key <FK08> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMedia        , XF86Sleep             ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I234>,clearmods=all), Redirect(key=<I150>,clearmods=all), // <I234>/<I150>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F08
+    key <FK09> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86HomePage          , XF86WWW               ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I180>,clearmods=all), Redirect(key=<I158>,clearmods=all), // <I180>/<I158>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F09
+    key <FK10> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Search            , XF86Mail              ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I225>,clearmods=all), Redirect(key=<I223>,clearmods=all), // <I225>/<I223>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // F10
+    key <FK11> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Explorer          , XF86Launch1           ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I152>,clearmods=all), Redirect(key=<I156>,clearmods=all), // <I152>/<I156>(‡‡)
+                   NoAction()           , NoAction()           ] // (in inet(evdev), XF86Launch3 is <I210>)
+               };  // F11
+    key <FK12> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Calculator        , XF86Launch2           ],
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I148>,clearmods=all), Redirect(key=<I157>,clearmods=all), // <I148>/<I157>(‡‡)
+                   NoAction()           , NoAction()           ] // (in inet(evdev), XF86Launch4 is <I211>)
+               };  // F12
+
+    key <TLDE> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Delete  , Delete , Delete           , Delete             ], // Del
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<DELE>) , Redirect(key=<DELE>)  , // <DELE>
+                   Redirect(key=<DELE>) , Redirect(key=<DELE>) ]  // <DELE>
+               };  // ` ~
+    key <AE01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F1      , F1     , exclam           , exclam             ], // !
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK01>,clearmods=LevelFive), Redirect(key=<FK01>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 1
+    key <AE02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F2      , F2     , at               , at                 ], // @
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK02>,clearmods=LevelFive), Redirect(key=<FK02>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 2
+    key <AE03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F3      , F3     , numbersign       , numbersign         ],  // #
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK03>,clearmods=LevelFive), Redirect(key=<FK03>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 3
+    key <AE04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F4      , F4     , dollar           , sterling           ], // $£
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK04>,clearmods=LevelFive), Redirect(key=<FK04>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 4
+    key <AE05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F5      , F5     , percent          , EuroSign           ], // %€
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK05>,clearmods=LevelFive), Redirect(key=<FK05>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 5
+    key <AE06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F6      , F6     , asciicircum      , asciicircum        ], // ^
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK06>,clearmods=LevelFive), Redirect(key=<FK06>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 6
+    key <AE07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F7      , F7     , KP_7             , U21D6              ], // KP_7 ↖ ⇖
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK07>,clearmods=LevelFive), Redirect(key=<FK07>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 7
+    key <AE08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F8      , F8     , KP_8             , U21D1              ], // KP_8 ↑ ⇑
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK08>,clearmods=LevelFive), Redirect(key=<FK08>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 8
+    key <AE09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F9      , F9     , KP_9             , U21D7              ], // KP_9 ↗ ⇗
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK09>,clearmods=LevelFive), Redirect(key=<FK09>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 9
+    key <AE10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F10     , F10    , KP_Multiply      , KP_Multiply        ], // KP_*
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK10>,clearmods=LevelFive), Redirect(key=<FK10>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // 0
+    key <AE11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F11     , F11    , KP_Subtract      , KP_Subtract        ], // KP_-
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK11>,clearmods=LevelFive), Redirect(key=<FK11>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // - _
+    key <AE12> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   F12     , F12    , KP_Equal         , KP_Equal           ], // KP_=
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<FK12>,clearmods=LevelFive), Redirect(key=<FK12>,clearmods=LevelFive),
+                   NoAction()           , NoAction()           ]
+               };  // = +
+
+    key <AD01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Escape               , Escape                , // Esc
+                   Home                 , KP_Home              ], // Home
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)   , // <ESC>
+                   Redirect(key=<HOME>) , Redirect(key=<HOME>) ]  // <HOME>
+               };  // Cmk Q
+    key <AD02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86ScrollUp         , XF86ScrollRight       , // ScrollUp(††)
+                   Up                   , KP_Up                ], //  ↑
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=4)     , PtrBtn(button=6)      , // PtrWhBtUp/Ri
+                   NoAction()           , NoAction()           ]
+               };  // Cmk W
+    key <AD03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Back             , XF86Back              , // BrBck
+                   End                  , KP_End               ], // End
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I166>) , Redirect(key=<I166>)  , // <I166>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // Cmk F
+    key <AD04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Forward          , XF86Forward           , // BrFwd
+                   Delete               , KP_Delete            ], // Del
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I167>) , Redirect(key=<I167>)  , // <I167>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // Cmk P
+    key <AD05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Up           , Pointer_Up            , // PtrUp(††)
+                   Escape               , Escape               ], // Esc
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=+0,y=-8)   , MovePtr(x=+0,y=-8)    , // PtrUp(††)
+                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)  ]  // <ESC>
+               };  // Cmk G
+    key <AD06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Page_Up              , Page_Up               , // PgUp
+                   Page_Up              , KP_Prior             ], // PgUp
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<PGUP>) , Redirect(key=<PGUP>)  , // <PGUP>
+                   Redirect(key=<PGUP>) , NoAction()           ]
+               };  // Cmk J
+    key <AD07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Home                 , Home                  , // Home
+                   KP_4                 , U21D0                ], // KP_4 ← ⇐
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<HOME>) , Redirect(key=<HOME>)  , // <HOME>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk L
+    key <AD08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Up                   , Up                    , //  ↑
+                   KP_5                 , U21D4                ], // KP_5 ↔ ⇔
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<UP>)   , Redirect(key=<UP>)    , // <UP>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk U
+    key <AD09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   End                  , End                   , // End
+                   KP_6                 , U21D2                ], // KP_6 → ⇒
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<END>)  , Redirect(key=<END>)   , // <END>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk Y
+    key <AD10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Delete               , Delete                , // Del
+                   KP_Add               , KP_Add               ], // KP_+
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<DELE>) , Redirect(key=<DELE>)  , // <DELE>
+                   NoAction()           , NoAction()           ]
+               };  // ; :
+    key <AD11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Escape               , Escape                , // Esc
+                   parenleft            , braceleft            ], //  (
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)   , // <ESC>
+                   NoAction()           , NoAction()           ]
+               };  // [ {
+    key <AD12> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Insert               , Insert                , // Ins
+                   parenright           , braceright           ], //  )
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<INS>)  , Redirect(key=<INS>)   , // <INS>
+                   NoAction()           , NoAction()           ]
+               };  // ] }
+    key <BKSL> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Favorites        , XF86MyComputer        , // BrFav
+                   backslash            , bar                  ], // BKSL
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<I164>,clearmods=all), Redirect(key=<I165>,clearmods=all), // <I164>/<I165>(‡‡)
+                   NoAction()           , NoAction()           ]
+               };  // \ |
+
+    key <AC01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Alt_L                , Alt_L                 , // Alt
+                   Left                 , KP_Left              ], //  ←
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   SetMods(mods=Alt)    , SetMods(mods=Alt)     , // Alt mod for <LALT>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk A
+    key <AC02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Down                 , XF86ScrollDown        , // ScrollDown(††)
+                   Down                 , KP_Down              ], //  ↓
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=5)     , PtrBtn(button=7)      , // PtrWhBtDn/Le
+                   NoAction()           , NoAction()           ]
+               };  // Cmk R
+    key <AC03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Shift_L              , Shift_L               , // Shift
+                   Right                , KP_Right             ], //  →
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   SetMods(mods=Shift)  , SetMods(mods=Shift)   , // Shift mod for <LFSH>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk S
+    key <AC04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Control_L            , Control_L             , // Ctrl
+                   BackSpace            , BackSpace            ], // Back
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   SetMods(mods=Control) , SetMods(mods=Shift+Control) , // Control mod for <LCTL>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk T
+    key <AC05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Down         , Pointer_Down          , // PtrDn(††)
+                   KP_Begin             , KP_Begin             ], // KP_Begin?!?
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=+0,y=+8)   , MovePtr(x=+0,y=+8)    , // PtrDn(††)
+                   NoAction()           , NoAction()           ]
+               };  // Cmk D
+    key <AC06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Page_Down            , Page_Down             , // PgDn
+                   Page_Down            , KP_Next              ], // PgDn
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<PGDN>) , Redirect(key=<PGDN>)  , // <PGDN>
+                   Redirect(key=<PGDN>) , NoAction()           ]
+               };  // H
+    key <AC07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Left                 , Left                  , //  ←
+                   KP_1                 , U21D9                ], // KP_1 ↙ ⇙
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<LEFT>) , Redirect(key=<LEFT>)  , // <LEFT>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk N
+    key <AC08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Down                 , Down                  , //  ↓
+                   KP_2                 , U21D3                ], // KP_2 ↓ ⇓
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<DOWN>) , Redirect(key=<DOWN>)  , // <DOWN>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk E
+    key <AC09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Right                , Right                 , //  →
+                   KP_3                 , U21D8                ], // KP_3 ↘ ⇘
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<RGHT>) , Redirect(key=<RGHT>)  , // <RGHT>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk I
+    key <AC10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   BackSpace            , BackSpace             , // Back
+                   KP_Enter             , KP_Enter             ], // KP_Enter
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<BKSP>) , Redirect(key=<BKSP>)  , // <BKSP>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk O
+    key <AC11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Menu                 , Menu                  , // Menu
+                   apostrophe           , quotedbl             ], // ' "
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<MENU>) , Redirect(key=<MENU>)  , // <MENU>/<COMP>
+                   NoAction()           , NoAction()           ]
+               };  // ' "
+
+    key <LSGT> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_EnableKeys  , Pointer_EnableKeys     , // Ptr_On
+                   Pointer_EnableKeys  , Pointer_EnableKeys    ]  // (Enable MouseKeys)
+               };  // < >
+    key <AB01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Undo                 , Redo                  , // Undo/Redo
+                   Undo                 , Redo                 ], // Undo/Redo
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+Z
+      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+Z
+//                   Redirect(key=<UNDO>) , Redirect(key=<UNDO>) ]  // <UNDO>(‡‡) (not working?)
+               };  // Z
+    key <AB02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Cut              , XF86Cut               , // Cut(§§)
+                   XF86Cut              , XF86Cut              ], // Cut(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+X
+      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+X
+//                   Redirect(key=<CUT>)  , Redirect(key=<CUT>)  ]  // <CUT>(‡‡) (not working since Ub14.04?)
+               };  // X
+    key <AB03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Copy             , XF86Copy              , // Copy(§§)
+                   XF86Copy             , XF86Copy             ], // Copy(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+C
+      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+C
+//                   Redirect(key=<COPY>) , Redirect(key=<COPY>) ]  // <COPY>(‡‡) (not working since Ub14.04?)
+               };  // C
+    key <AB04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Paste            , XF86Paste             , // Paste(§§)
+                   XF86Paste            , XF86Paste            ], // Paste(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB04>,mods=Control,clearmods=LevelFive), Redirect(key=<AB04>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+V
+      Redirect(key=<AB04>,mods=Control,clearmods=LevelFive), Redirect(key=<AB04>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+V
+//                   Redirect(key=<PAST>) , Redirect(key=<PAST>)  , // <PAST>(‡‡)
+//                   Redirect(key=<PAST>) , Redirect(key=<PAST>) ]  // <PAST>(‡‡) (not working since Ub14.04?)
+               };  // V
+    key <AB05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button1      , Pointer_Button1       , // LBt(††)
+                   Pointer_Button1      , Pointer_Button1      ], // LBt
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=1)     , PtrBtn(button=1)      , // PtrLBt
+                   NoAction()           , NoAction()           ]
+               };  // B
+    key <AB06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button2      , Pointer_Button2       , // MBt(††)
+                   Num_Lock             , Num_Lock             ], // NumLock
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=2)     , PtrBtn(button=2)      , // PtrMBt
+                   NoAction()           , NoAction()           ]
+               };  // Cmk K
+    key <AB07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button3      , Pointer_Button3       , // RBt(††)
+                   KP_0                 , U21D5                ], // KP_0 ↕ ⇕
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=3)     , PtrBtn(button=3)      , // PtrRBt
+                   NoAction()           , NoAction()           ]
+               };  // M
+    key <AB08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Left         , Pointer_Left          , // PtrLe(††)
+                   comma                , semicolon            ], //  , ;
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=-8,y=+0)   , MovePtr(x=-8,y=+0)    , // PtrLe(††)
+                   NoAction()           , NoAction()           ]
+               };  // , <
+    key <AB09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Right        , Pointer_Right         , // PtrRi(††)
+                   KP_Decimal           , colon                ], // KP_. :
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=+8,y=+0)   , MovePtr(x=+8,y=+0)    , // PtrRi(††)
+                   NoAction()           , NoAction()           ]
+               };  // . >
+    key <AB10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Multi_key            , Multi_key             , // Compose
+                   KP_Divide            , KP_Divide            ]  // KP_/
+               };  // / ?
+
+    key <SPCE> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Return               , Return                , // Enter
+                   space                , nobreakspace         ], // Space
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<RTRN>) , Redirect(key=<RTRN>)  , // <RTRN>
+                   NoAction()           , NoAction()           ]
+               };  // <SPCE>
+//    key <CAPS> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol ] };  // CapsLock
+
+// §§: XCV Cut/Copy/Paste seem OK in Firefox but not Gedit!? This is a GTK weakness
+//     Some bind fiddling in ~/.gtkrc-2.0 and ~/.config/gtk-3.0/gtk.css can get this working
+// ††: 'Pointer_'mousing needs enabling! Real KP_ keys work but not the Pointer_ mousing symbols
+//    (In the Settings GUI there's a Shift+NumLock option for this, but Pointer_EnableKeys works too)
+// ‡‡: Multimedia keys are in symbols/inet(evdev); this should be enabled (base rules usually handle it)
+// NOTE: RedirectKey alone doesn't work for the #->FK keys; they then act as the remapped FK## (Multimedia)
+
+// NOTE: I'm not mapping the CAPS key to lv5_switch here, as that should be done separately
+//  key <CAPS> { [ ISO_Level5_Shift , BackSpace , Caps_Lock , Caps_Lock , NoSymbol ] };
+//  modifier_map Mod3   { ISO_Level5_Shift };
+
+// NOTE: Leave for the layout/options to decide which key(s) to use as switches!
+//    include "level3(ralt_switch)"
+//    include "level5(caps_switch)"
+};
+
+// NOTE: Alt worked with just the symbol, Shift/Ctrl not. Shift/Control are "real" mods; Alt a "virtual" one.
+//       Adding SetMods() actions to the Shift/Ctrl keys, they work as they should.
+
+// NOTE: Lv5+S+T+N (Shift+Ctrl+Left) is too much at once; letting go of S but not T lets the arrows work.
+//       Using one physical modifier and the other Extend mapped (Lv5+S+<LCTL>+N) functions as expected!
+//       It's the same for Lv5+A+T+<PGDN> for tab switching; works only with physical either Ctrl or Alt.
+
+// NOTE:  See the ALT_NAV keys in http://osdir.com/ml/xfree86.internationalization/2004-04/msg00010.html
+// key <AC06> { type="ALT_NAV", // Here, the D key is mapped to Home using Alt as a modifier:
+// [ d, D, Home ], actions[Group1]=[NoAction(), NoAction(), Redirect(key=<HOME>, clearmods=Alt)] };
+
+// NOTE: Are modifier mappings necessary? Don't think so; they're set right in compat already
+//    modifier_map Shift   { Shift_L   , Shift_R   };
+//    modifier_map Lock    { Caps_Lock , ISO_Lock  };
+//    modifier_map Control { Control_L , Control_R };
+//    modifier_map Control { Control_L, <LCTL>, Control_R, <RCTL> };
+
+// NOTE: Maybe one could use the capslock(groupshift) functionality for Extend layers?
+//    key <CAPS> { [ Mode_switch , BackSpace , Caps_Lock , Caps_Lock , NoSymbol ] };
+//    // The capslock(groupshift) switch defines the <CAPS> ground state as a Mode_switch key.
+// But: The 4 groups are really meant for different locales/scripts/layouts that some people (me!) need.
+
+
+//// An attempt at using the Overlay functionality for modifier Extend mappings.
+//// If the Extend key could both switch lv5 AND Overlay1, maybe the A/S/T modifiers would work?
+//// The idea would be to map only these as overlay keys, and the rest as lv5+
+//// NOTE: Not working. Problem: The Caps key cannot both be a lvl5_switch and overlay_switch!?
+//partial // alphanumeric_keys
+//xkb_symbols "overlay_mods" {
+////    name[Group1]= "Extend layer";
+//
+//    key <AC01> { overlay1 = <LALT> }; //Alt
+//    key <AC03> { overlay1 = <LFSH> }; //Shift
+//    key <AC04> { overlay1 = <LCTL> }; //Ctrl
+////    key <CAPS> { [ Overlay1_Enable ], overlay1 = <CAPS> };
+//
+//// NOTE: The standard OverlayEnable key a is a lock, not a switch key. A compat addition would be needed.
+////       Or could it all be done by 'action' commands, like in symbols/level5 ('lock'!?) and group etc?
+////           actions[Group1] = [ SetMods(mods=LevelFive), SetControls(controls=Overlay1) ]
+//// Look into a variation of this to enable both with one key (in compat?):
+////  interpret Pointer_EnableKeys { action= LockControls(controls=MouseKeys+Overlay1); };
+//// NOTE: LevelFive is a *modifier*, Overlay1 a *control*; need to use both SetMods and SetControls then!?
+//};
+
+// --> OEystein Bech "DreymaR" Gadmar, 2013-09: Additions to xkb/compat/level5
+//// DESC: Level5+Overlay1 combined switch
+//// NOTE: Double-action crashed the server badly! Another tack is needed.
+//    interpret Overlay1_Level5_Shift+Any {
+//	//useModMapMods= level1;  // This makes the code use group 1 for all!
+//	virtualModifier= LevelFive;
+//	action= SetMods(mods=LevelFive);
+//	action= SetControls(controls=Overlay1);
+//    };
+//
+//    interpret Overlay1_Level5_Shift {
+//	action= SetMods(mods=LevelFive);
+//	action= SetControls(controls=Overlay1);
+//    };
+//
+//};
+// <-- DreymaR: Additions to xkb/compat/level5
+
+// --> OEystein Bech "DreymaR" Gadmar, 2013-09: Additions to xkb/symbols/level5
+//// NOTE: Tested the addition of a Level5+Overlay1 switch; the double role didn't work!
+//partial modifier_keys
+//xkb_symbols "caps_overlay_switch" {
+//  key <CAPS> {
+//    type[Group1]="ONE_LEVEL",
+//    vmods = LevelFive,
+//    symbols[Group1] = [ Overlay1_Level5_Shift ],
+//    actions[Group1] = [ SetMods(mods=LevelFive); SetControls(controls=Overlay1) ]
+//    };
+//  modifier_map Mod3   { Overlay1_Level5_Shift };
+//};
+// <-- DreymaR: Additions to xkb/symbols/level5
+
+// An attempt at using the Overlay functionality for all Extend mappings.
+// NOTE: Apparently, any key can only have ONE overlay!
+// The Overlay1/Overlay2 bits determine which one, but for some odd reason a key can't have both defined.
+// This means that the idea of several Extend layers can't be implemented easily in this way.
+// NOTE: For testing purposes, I'm only mapping some keys for now. The rest can follow if this works! :)
+//partial // alphanumeric_keys
+//xkb_symbols "overlay_full" {
+////    name[Group1]= "Extend layer";
+
+//    key <ESC>  { overlay1 = <CAPS> };
+//    key <SCLK> { overlay1 = <CAPS> };
+//    key <TLDE> { overlay1 = <DELE> };
+//    key <AE01> { overlay1 = <FK01> };
+//    key <AE02> { overlay1 = <FK02> };
+//    key <AE03> { overlay1 = <FK03> };
+//    key <AE04> { overlay1 = <FK04> };
+//    key <AE05> { overlay1 = <FK05> };
+//    key <AE06> { overlay1 = <FK06> };
+//    key <AD01> { overlay1 = <ESC>  }; //Esc
+//    key <AD02> { overlay1 = <I185> }; // KEY_SCROLLUP  //(††)
+//    key <AD03> { overlay1 = <I166> }; // #define KEY_BACK
+//    key <I166> { [ XF86Back    ] }; //BrBck
+//    key <AD04> { overlay1 = <I167> }; // #define KEY_FORWARD
+//    key <AD06> { overlay1 = <PGUP> }; //PgUp
+//    key <AD07> { overlay1 = <HOME> }; //Home
+//    key <AD08> { overlay1 = <UP>   }; // ↑
+//    key <AD09> { overlay1 = <END>  }; //End
+//    key <AD10> { overlay1 = <DELE> }; //Del
+//    key <AD11> { overlay1 = <ESC>  }; //Esc
+//    key <AD12> { overlay1 = <INS>  }; //Ins
+//    key <AC01> { overlay1 = <LALT> }; //Alt
+//    key <AC02> { overlay1 = <I186> }; // KEY_SCROLLDOWN //(††)
+//    key <AC03> { overlay1 = <LFSH> }; //Shift
+//    key <AC04> { overlay1 = <LCTL> }; //Ctrl
+//    key <AC06> { overlay1 = <PGDN> }; //PgDn
+//    key <AC07> { overlay1 = <LEFT> }; // ←
+//    key <AC08> { overlay1 = <DOWN> }; // ↓
+//    key <AC09> { overlay1 = <RGHT> }; // →
+//    key <AC10> { overlay1 = <BKSP> }; //Back
+//    key <SPCE> { overlay1 = <RTRN> }; //Entr
+//    key <CAPS> { [ Overlay1_Enable ], overlay1 = <CAPS> };
+//};
+
diff -ur --new-file xkeyboard-config-2.18-orig/symbols/james xkeyboard-config-2.18/symbols/james
--- xkeyboard-config-2.18-orig/symbols/james	1970-01-01 01:00:00.000000000 +0100
+++ xkeyboard-config-2.18/symbols/james	2016-10-17 10:48:59.868936439 +0100
@@ -0,0 +1,308 @@
+partial alphanumeric_keys
+xkb_symbols "colemak" {
+    include "us(colemak)"
+
+    name[Group1]="English (UK, Colemak)";
+
+    key <AE03> { [            3,     sterling,     ordfeminine,    threesuperior ] };
+    key <AE04> { [            4,       dollar,            cent,       onequarter ] };
+
+    key <AB10> { [        slash,     question,  periodcentered,     questiondown ] };
+
+    key <TLDE> { [        grave,      notsign,       brokenbar,              bar ] };
+
+    key <BKSL> { [    backslash,          bar,           U0190,       dead_breve ] };
+    key <LSGT> { [   asciitilde,   numbersign,         minutes,          seconds ] };
+    key <AB06> { [            k,            K,  dead_abovering,            U27E8 ] };
+    key <AB07> { [            m,            M,     dead_macron,            U27E9 ] };
+    key <AB08> { [        comma,         less,    dead_cedilla,            U1614 ] };
+    key <AB09> { [       period,      greater,   dead_abovedot,            U0190 ] };
+
+    include "level3(ralt_switch_multikey)"
+};
+
+partial alphanumeric_keys
+xkb_symbols "prog" {
+    include "james(colemak)"
+
+    name[Group1]="Programming (Colemak)";
+
+    key <AE01> { [       exclam,            1,      exclamdown,      onesuperior ] };
+    key <AE02> { [           at,            2,       masculine,      twosuperior ] };
+    key <AE03> { [     sterling,            3,     ordfeminine,    threesuperior ] };
+    key <AE04> { [       dollar,            4,            cent,       onequarter ] };
+    key <AE05> { [      percent,            5,        EuroSign,              yen ] };
+    key <AE06> { [  asciicircum,            6,         hstroke,          Hstroke ] };
+    key <AE07> { [    ampersand,            7,             eth,              ETH ] };
+    key <AE08> { [     asterisk,            8,           thorn,            THORN ] };
+    key <AE09> { [         less,            9,  leftsinglequotemark,  leftdoublequotemark ] };
+    key <AE10> { [      greater,            0, rightsinglequotemark,  rightdoublequotemark ] };
+
+    key <AB09> { [        comma,    parenleft,    dead_cedilla,            U1614 ] };
+    key <AB10> { [       period,   parenright,   dead_abovedot,            U0190 ] };
+
+    replace key <ESC> { [ Caps_Lock ] };
+    replace key <CAPS> { [ Shift_L ] };
+    replace key <LFSH> { [ Control_L ] };
+    replace key <LCTL> { [ Escape ] };
+};
+
+partial alphanumeric_keys
+xkb_symbols "progwide" {
+    include "james(prog)"
+
+    name[Group1]="Programming (Colemak, wide)";
+
+    key <AE03> { [   numbersign,            3,     ordfeminine,    threesuperior ] };
+
+    key <AD06> { [  bracketleft,    braceleft,   guillemotleft,        0x1002039 ] };
+    key <AD07> { [            j,            J,         dstroke,          Dstroke ] };
+    key <AD08> { [            l,            L,         lstroke,          Lstroke ] };
+    key <AD09> { [            u,            U,          uacute,           Uacute ] };
+    key <AD10> { [            y,            Y,      udiaeresis,       Udiaeresis ] };
+    key <AD11> { [    semicolon,        colon,      odiaeresis,       Odiaeresis ] };
+    key <AD12> { [    backslash,          bar,      asciitilde,       asciitilde ] };
+
+    key <AC06> { [ bracketright,   braceright,  guillemotright,        0x100203a ] };
+    key <AC07> { [            h,            H,      dead_caron,       asciitilde ] };
+    key <AC08> { [            n,            N,          ntilde,           Ntilde ] };
+    key <AC09> { [            e,            E,          eacute,           Eacute ] };
+    key <AC10> { [            i,            I,          iacute,           Iacute ] };
+    key <AC11> { [            o,            O,          oacute,           Oacute ] };
+    key <AC12> { [   apostrophe,     quotedbl,          otilde,           Otilde ] };
+
+    key <LSGT> { [            z,            Z,              ae,               AE ] };
+    key <AB01> { [            x,            X, dead_circumflex,       asciitilde ] };
+    key <AB02> { [            c,            C,        ccedilla,         Ccedilla ] };
+    key <AB03> { [            v,            V,              oe,               OE ] };
+    key <AB04> { [            b,            B,      dead_breve,       asciitilde ] };
+    key <AB05> { [   asciitilde,     sterling,         minutes,          seconds ] };
+    key <AB06> { [        slash,     question,  periodcentered,     questiondown ] };
+    key <AB07> { [            k,            K,  dead_abovering,            U27E8 ] };  // ⟨
+    key <AB08> { [            m,            M,     dead_macron,            U27E9 ] };  // ⟩
+    key <AB09> { [        comma,    parenleft,    dead_cedilla,            U1614 ] };  // ᘔ
+    key <AB10> { [       period,   parenright,   dead_abovedot,            U0190 ] };  // Ɛ
+};
+
+partial alphanumeric_keys
+xkb_symbols "progwide_dh" {
+    include "james(progwide)"
+
+    name[Group1]="Programming (Colemak-DH, wide)";
+
+    key <AD05> { [            b,            B,      dead_breve,       asciitilde ] };
+    key <AC05> { [            g,            G,     dead_ogonek,       asciitilde ] };
+    key <AB04> { [            d,            D,  dead_diaeresis,       asciitilde ] };
+
+    key <AC07> { [            k,            K,  dead_abovering,       asciitilde ] };
+    key <AB07> { [            h,            H,      dead_caron,            U27E8 ] };  // ⟨
+};
+
+
+partial alphanumeric_keys
+xkb_symbols "jb" {
+    include "james(colemak)"
+
+    name[Group1]="Lojban (Colemak, non-ASCII)";
+
+    key <AB03> { [U0283, U01A9, c, C] };
+    key <AC08> { [U025B, U0190, e, E] };
+    key <AD06> { [U0292, U01B7, j, J] };
+    key <AD09> { [schwa, SCHWA, y, Y] };
+
+    include "level3(ralt_switch_multikey)"
+};
+
+partial alphanumeric_keys
+xkb_symbols "jbwide" {
+    include "james(progwide)"
+
+    name[Group1]="Lojban (Colemak, wide, non-ASCII)";
+
+    key <AB03> { [U0283, U01A9, c, C] };
+    key <AC09> { [U025B, U0190, e, E] };
+    key <AD07> { [U0292, U01B7, j, J] };
+    key <AD10> { [schwa, SCHWA, y, Y] };
+
+    key <AB07> { [apostrophe, h, otilde, Otilde] };
+    key <AC12> { [quotedbl, H, dead_caron, asciitilde] };
+
+    include "level3(ralt_switch_multikey)"
+};
+
+
+partial alphanumeric_keys modifier_keys
+xkb_symbols "lv5" {
+    include "extend"
+
+    key <AD07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Page_Up              , Page_Up               , // PgUp
+                   Page_Up              , KP_Prior             ], // PgUp
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<PGUP>) , Redirect(key=<PGUP>)  , // <PGUP>
+                   Redirect(key=<PGUP>) , NoAction()           ]
+               };  // Cmk J
+    key <AD08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Home                 , Home                  , // Home
+                   KP_4                 , U21D0                ], // KP_4 ← ⇐
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<HOME>) , Redirect(key=<HOME>)  , // <HOME>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk L
+    key <AD09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Up                   , Up                    , //  ↑
+                   KP_5                 , U21D4                ], // KP_5 ↔ ⇔
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<UP>)   , Redirect(key=<UP>)    , // <UP>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk U
+    key <AD10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   End                  , End                   , // End
+                   KP_6                 , U21D2                ], // KP_6 → ⇒
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<END>)  , Redirect(key=<END>)   , // <END>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk Y
+    key <AD11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Delete               , Delete                , // Del
+                   KP_Add               , KP_Add               ], // KP_+
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<DELE>) , Redirect(key=<DELE>)  , // <DELE>
+                   NoAction()           , NoAction()           ]
+               };  // ; :
+    key <AD06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Escape               , Escape                , // Esc
+                   parenleft            , braceleft            ], //  (
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)   , // <ESC>
+                   NoAction()           , NoAction()           ]
+               };  // [ {
+    key <AC06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Insert               , Insert                , // Ins
+                   parenright           , braceright           ], //  )
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<INS>)  , Redirect(key=<INS>)   , // <INS>
+                   NoAction()           , NoAction()           ]
+               };  // ] }
+
+    key <AC07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Page_Down            , Page_Down             , // PgDn
+                   Page_Down            , KP_Next              ], // PgDn
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<PGDN>) , Redirect(key=<PGDN>)  , // <PGDN>
+                   Redirect(key=<PGDN>) , NoAction()           ]
+               };  // H
+    key <AC08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Left                 , Left                  , //  ←
+                   KP_1                 , U21D9                ], // KP_1 ↙ ⇙
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<LEFT>) , Redirect(key=<LEFT>)  , // <LEFT>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk N
+    key <AC09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Down                 , Down                  , //  ↓
+                   KP_2                 , U21D3                ], // KP_2 ↓ ⇓
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<DOWN>) , Redirect(key=<DOWN>)  , // <DOWN>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk E
+    key <AC10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Right                , Right                 , //  →
+                   KP_3                 , U21D8                ], // KP_3 ↘ ⇘
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<RGHT>) , Redirect(key=<RGHT>)  , // <RGHT>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk I
+    key <AC11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   BackSpace            , BackSpace             , // Back
+                   KP_Enter             , KP_Enter             ], // KP_Enter
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<BKSP>) , Redirect(key=<BKSP>)  , // <BKSP>
+                   NoAction()           , NoAction()           ]
+               };  // Cmk O
+    key <AC12> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Menu                 , Menu                  , // Menu
+                   apostrophe           , quotedbl             ], // ' "
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   Redirect(key=<MENU>) , Redirect(key=<MENU>)  , // <MENU>/<COMP>
+                   NoAction()           , NoAction()           ]
+               };  // ' "
+
+    key <AB05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_EnableKeys  , Pointer_EnableKeys     , // Ptr_On
+                   Pointer_EnableKeys  , Pointer_EnableKeys    ]  // (Enable MouseKeys)
+               };  // < >
+    key <LSGT> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Undo                 , Redo                  , // Undo/Redo
+                   Undo                 , Redo                 ], // Undo/Redo
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+Z
+      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+Z
+//                   Redirect(key=<UNDO>) , Redirect(key=<UNDO>) ]  // <UNDO>(‡‡) (not working?)
+               };  // Z
+    key <AB01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Cut              , XF86Cut               , // Cut(§§)
+                   XF86Cut              , XF86Cut              ], // Cut(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+X
+      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+X
+//                   Redirect(key=<CUT>)  , Redirect(key=<CUT>)  ]  // <CUT>(‡‡) (not working since Ub14.04?)
+               };  // X
+    key <AB02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Copy             , XF86Copy              , // Copy(§§)
+                   XF86Copy             , XF86Copy             ], // Copy(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+C
+      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+C
+//                   Redirect(key=<COPY>) , Redirect(key=<COPY>) ]  // <COPY>(‡‡) (not working since Ub14.04?)
+               };  // C
+    key <AB03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   XF86Paste            , XF86Paste             , // Paste(§§)
+                   XF86Paste            , XF86Paste            ], // Paste(§§)
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+      Redirect(key=<AB04>,mods=Control,clearmods=LevelFive), Redirect(key=<AB04>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+V
+      Redirect(key=<AB04>,mods=Control,clearmods=LevelFive), Redirect(key=<AB04>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+V
+//                   Redirect(key=<PAST>) , Redirect(key=<PAST>)  , // <PAST>(‡‡)
+//                   Redirect(key=<PAST>) , Redirect(key=<PAST>) ]  // <PAST>(‡‡) (not working since Ub14.04?)
+               };  // V
+    key <AB04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button1      , Pointer_Button1       , // LBt(††)
+                   Pointer_Button1      , Pointer_Button1      ], // LBt
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=1)     , PtrBtn(button=1)      , // PtrLBt
+                   NoAction()           , NoAction()           ]
+               };  // B
+
+    key <AB07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button2      , Pointer_Button2       , // MBt(††)
+                   Num_Lock             , Num_Lock             ], // NumLock
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=2)     , PtrBtn(button=2)      , // PtrMBt
+                   NoAction()           , NoAction()           ]
+               };  // Cmk K
+    key <AB08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Button3      , Pointer_Button3       , // RBt(††)
+                   KP_0                 , U21D5                ], // KP_0 ↕ ⇕
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   PtrBtn(button=3)     , PtrBtn(button=3)      , // PtrRBt
+                   NoAction()           , NoAction()           ]
+               };  // M
+    key <AB09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Left         , Pointer_Left          , // PtrLe(††)
+                   comma                , semicolon            ], //  , ;
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=-8,y=+0)   , MovePtr(x=-8,y=+0)    , // PtrLe(††)
+                   NoAction()           , NoAction()           ]
+               };  // , <
+    key <AB10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Pointer_Right        , Pointer_Right         , // PtrRi(††)
+                   KP_Decimal           , colon                ], // KP_. :
+                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
+                   MovePtr(x=+8,y=+0)   , MovePtr(x=+8,y=+0)    , // PtrRi(††)
+                   NoAction()           , NoAction()           ]
+               };  // . >
+    key <AB06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
+                   Multi_key            , Multi_key             , // Compose
+                   KP_Divide            , KP_Divide            ]  // KP_/
+               };  // / ?
+};
diff -ur --new-file xkeyboard-config-2.18-orig/symbols/Makefile.am xkeyboard-config-2.18/symbols/Makefile.am
--- xkeyboard-config-2.18-orig/symbols/Makefile.am	2016-10-17 10:29:04.823669618 +0100
+++ xkeyboard-config-2.18/symbols/Makefile.am	2016-10-17 10:50:02.403337326 +0100
@@ -34,6 +34,7 @@
 tj tm tr tw tz \
 ua us uz vn \
 za \
+james \
 altwin capslock compose ctrl empty eurosign rupeesign group inet \
 keypad kpdl level3 level5 nbsp olpc shift srvr_ctrl typo
 
diff -ur --new-file xkeyboard-config-2.18-orig/symbols/Makefile.in xkeyboard-config-2.18/symbols/Makefile.in
--- xkeyboard-config-2.18-orig/symbols/Makefile.in	2016-10-17 10:29:04.825669664 +0100
+++ xkeyboard-config-2.18/symbols/Makefile.in	2016-10-17 10:51:12.928915544 +0100
@@ -396,6 +396,7 @@
 tj tm tr tw tz \
 ua us uz vn \
 za \
+james \
 altwin capslock compose ctrl empty eurosign rupeesign group inet \
 keypad kpdl level3 level5 nbsp olpc shift srvr_ctrl typo
 
